- src/main/ ~ : 실제 배포
- src/test/ ~ : 테스트 하기 위한 소스
- src 에는 들어갈 일이 없음 
- target :  패키징 시 jar 파일이 만들어지는 곳 ( 최정 컴파일 된 클래스, 패키징한 Jar 파일 위치 , 테스트 결과 )
- pom.xml
	: Project Object Model 의 약자
	: 프로젝트 객체 모델
	: Maven Build 도구에서 pom.xml 설정 정보를 바탕으로 프로젝트를 구성
	: Project , 이름, 패키징 방법, 사용할 자바 버전, 외부 라이브러리 , 배포 대상 , 톰캣 주소 등 설정 
	
	
	
* Spring Container
	- 객체 생성 및 조립을 지원하는 객체
	- 스프링의 가장 핵심적인 기능을 담당하는 객체
	
* BeanFactory
	- 기본적인 객체 생성 /조립만 지원
	- 구현체 : xmlBeanFactory
* Application Context
	- 객체 생성/ 조립
	- 국제화
	- ejb 연동
	- 구현체 : ClasspathXmlApplicationContext, FileSystemXmlApplicationContext, GenericXmlApplicationContext
* WebApplication Context
	- 기능을 ApplicationContext와 동일
	- Web 환경에 적합
	- 구현체 : XmlWebApplicationContext
	
* @Autowired
	- 빈 자동 주입을 지원하는 어노테이션
	- 멤버변수, setter 메소드, 생성자에 부착 가능
	- 해당 annotation 이 부착된 대상의 타입을 확인해서
		-> 멤버변수에 부착하면 변수타입
		-> setter 에 부착하면 매개변수 타입
		-> 생성자에 부착하면 매개변수 타입
	Spring Container 에서 해당 타입의 객체(구현객체 혹은 자식객체)를 찾아서 부착대상에게 자동으로 의존성주입 작업 수행
	
	-Spring Container에동일한 타입의 객체가 2개이상이거나 존재하지 않으면 에러 발생
	- 타입을 기준으로 의존성 주입 작업을 수행
	
* @Resource
	- @Autowired 의 기능을 전부 지원
	- @Resource(name="빈 이름")
		Spring Container 안에서 MessageSender 타입의 객체 중 빈의 이름에 해당하는 객체를 찾아서 의존성 주입
		
	- @Resource
		Spring Container 안에서 MessageSender 타입의 객체를 찾는다.
		객체가 하나만 존해자면 해당 객체로의존성주입 실행
		객체가 2개이상 존재하면 빈의 이름이 "sms"인 객체로 의존성 주입 실행
	
	
* 의존성 주입하기
1. 객체 생성하기, 기본 자료형(String 포함) 값 주입하기

	<bean id="sms" class="SmsMessageSender">
		<property name="company" value="SKT"></property>
	</bean>

	public SmsMessageSender{
		private String company; // 회사이름 주입
		public void setCompany(String Company){ this.company = company; }
	}

2. 객체 생성하기, 기뵨자료형값 생성자 메소드로 주입하기
	<bean id="sms" class="kakaotalkMessageSender">
		<construct-arg name="username" value="SKT"></construct-arg>
		<construct-arg name="password" value="zcv1234"></construct-arg>
		<construct-arg name="quota">1000000</construct-arg>
	</bean>
	public KakaotalkMessageSender {
		private String username;
		private String password;
		private int quota;
		public KakaotalkMessageSender(String username, String password, int quota){
			this.username= username;
			this.password = password;
			this.quota = quota;
			
		}
	}
	
3. 두 개 이상의 객체를 생성/조립하기
	<bean id="sms" class="SmsMessageSender">
		<property name="company" value="SKT"></property>
	</bean>	
	<bean id="noticeService" class="NoticeServiceImpl">
		//property 태그 - Setter 메소드 의존성 주입
		// ref 속성 - 스프링 컨테이너가 관리 중인 객체 중에서 빈의 식별자가 sms인 빈이 주입된다.
		<property name="messageSender" ref="sms"></property>
	</bean>
	public class NoticeServiceImpl{
		private MessageSneder messageSender;
		public void setMessageSender(MessageSender messageSender){
			this.messageSender = messageSender;
		}
	}
	
4. 두개 이상의 객체를 생성하기, 생성자 메소드로 의존성 주입하기

	<bean id="userDaoImpl" class="userDaoImpl"> ... </bean>
	<bean id="todoDaoImpl" class="TodoDaoImpl"> ... </bean>	
	<bean id="blogService" class="blogServiceImpl">
		<constructor-arg name="userDao" ref="userDaoImpl"></constructor-arg>
		<constructor-arg name="blogDao" ref="blogDaoImpl"></constructor-arg>
		<constructor-arg name="maxFileSize" value="10485760"></constructor-arg>
	</bean>	
	
	public class BlogServiceImpl {
		private UserDao userDao;
		private blogDao blogDao;
		private long maxFileSize;
		
		public BlogServiceImpl(UserDao userDao, BlogDao blogDao, long maxFileSize){ ... }
	
	}
	
5.properties 파일의 환경설정 정보를 읽어서 의존성 주입
	<bean id="dataSource" class="x.y.z.BasicDataSource">
		<property name="driverClassName" value="${db.driverClassName}"></property>
		<property name="url"			 value="${db.url}"></property>
		<property name="username" 		 value="${db.username}"></property>
		<property name="password" 		 value="${db.password}"></property>
	</bean>
	<context:property-placehold location="classpath:/db/database.properties" ></context:property-placehold>
	     - database.properties 파일의 내용
	     	:	db.driverClassName=oracle.jdbc.OracleDriver
	     		db.url=jdbc:oracle:thin:@localhost:1521:xe
	     		db.username=jhta
	     		db.password=zxcv1234
	     		
	     		
6. 클래스를 스캔해서 스프링 컨테이너가 관리하는 빈(객체)으로 등록하기
	* @Component, @Controller , @ControllerAdvice, @RestController, @Service, @Repository
	등의 스프링이 제공하는 어노테이션이 부착된 클래스는 스캔 대상 클래스가 된다.
	
	* Bean Configuration 파일에 Context 네임스페이스를 추가한다.
	<context:annotation-config></context:annotation-config>
	<context:component-scan basepackage="kr.co.jhta"></context:component-scan>
			* 지정된 패키지 및 그 하위의 모든 패키지에서 위에서 설명한 어노테이션이 부착된 클래스를 스캔해서 전부 스프링 컨테이너가관리하는 빈으로 등록된다.
	
	package kr.co.jhta.message;
	@Component
	public class SmsMessageSender implements MessageSender { ... }
	@Service
	public class NoticeServiceImpl implements NoticeService { ... }
	@Repository
	public class UserDaoImpl implements UserDao { ... }
	     		
	     		
7. 자동으로 스프링 컨테이너가 관리하는 빈으로 등록된 객체에 의존성 주입하기(조립하기)
		     		
	<context:annotation-config></context:annotation-config>
	<context:annotation-config/> 태그는 의존성 주입/ 빈 라이프 사이클과 관련된 어노테이션을 감지하고, 적절한 처리를 수행하는
		AnnotationProcessor 객체를 스프링의 빈으로 등록한다.
		등록된 AnnotationProcessor 객체들은 @Autowired, @PostConstructor, @PreDestory,
		@Resource, @Value 등의 어노테이션을 분석하고, 적절한 작업을 수행한다.
	
	
	<context:component-scan basepackage="kr.co.jhta"></context:component-scan>
	

	
	package kr.co.jhta.message;
	@Component
	public class SmsMessageSender implements MessageSender { ... }
	@Service
	public class NoticeServiceImpl implements NoticeService { 
		@Autowired
		private MessageSender messageSender;
	}
	@Service
	public class EventServiceImpl implements EventService { 
		private MessageSender messageSender;
		@Autowired
		public void setMessageSender(MessageSender messageSender){
			this.messageSender = messageSender;
		}
	}









	
	
	
	
	
	













	
	
	
	
	
	
	