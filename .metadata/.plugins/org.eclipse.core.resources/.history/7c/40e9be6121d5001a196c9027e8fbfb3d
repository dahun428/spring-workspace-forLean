package kr.co.jhta.web;

import java.io.File;
import java.io.FileOutputStream;
import java.util.List;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.co.jhta.form.BoardForm;
import kr.co.jhta.service.BoardService;
import kr.co.jhta.vo.Board;

@Controller
@RequestMapping("/board")
public class BoardController {

	@Autowired
	private BoardService boardService;
	
	@Value("${directory.save.freeboard}")
	private String saveDirectory;
	
	@RequestMapping("/list.do")
	public String boardList(Model model) {

		//게시글 전체조회
		List<Board> boardList = boardService.getAllBoards();
		// 조회된 게시글을  Model 에 담아서 View 페이지에 전달하기
		model.addAttribute("boards", boardList);
		//내부 이동할 JSP 페이지의경로및 이름 반환
		return "board/list";
	}
	@RequestMapping("/form.do")
	public String form() {
		return "board/form";
	}
	@RequestMapping("/add.do")
	public String addBoard(BoardForm boardForm) throws Exception {
		
		Board board = new Board();
		
		//BeanUtils.copyProperties(원본, 대상)
		// * 원본 객체의 필드 값을 대상객체의 필드에 복사한다.
		// * 원본 객체의 필드명과 대상 객체의 필드명이 동일한 필드만 복사 가능
		// * 원본 객체와 대상 객체의 필드 명은 동일하지만 타입이 서로 다를때는 에러 발생
		// * 원본 객체의 대상 객체의 필드를 선택적으로 복사할 수 없다.
		// (필드명은 동일하지만, 타입이 다른 필드가 존재하지 않아야 한다.)
		// title, writer, content, password 값이 boardForm에서 board로 복사된다.
		BeanUtils.copyProperties(boardForm, board);
		
		//첨부파일 다루기
		//MultipartFile
		// * 첨부파일 업로드를 지원하는 객체
		// * form 태그의 enctype="multipart/form-data"이고, 첨부파일 필드가 있고,
		// xxx Form 객체에 첨부파일 입력필드와 동일한 이름의 필드가 있으면,
		// MultipartFile의 결코 null 이 아니다.
		// (<input type="file" /> 입력필드에서 첨부파일을 선택하지 않아도
		//   MultipartFile 객체는 null이 아니다, 비어있을 뿐이다.)
		// 주요 API
		//	 String getOriginalFileName()
		//	첨부파일 명을 반환한다.
		//	byte[] getBytes()
		//	첨부파일의 내용을 byte 계열로 반환한다.
		//	InputStream getInpuStream()
		//	서버의 임시 디렉토리에 저장된 첨부파일을 읽어오는스트림을 반환한다.
		MultipartFile upfile = boardForm.getUpfile();
		if(!upfile.isEmpty()) {
			String filename = upfile.getOriginalFilename();
			filename = System.currentTimeMillis() + filename;
			File file = new File(saveDirectory,filename);
			FileCopyUtils.copy(upfile.getInputStream(), new FileOutputStream(file));
			board.setFilename(filename);
			
		}
		boardService.addNewBoard(board);
		
		
		
		return "redirect:list.do";
	}
	@RequestMapping("/likes.do")
	public String likesBoard(@RequestParam("no") long boardNo, RedirectAttributes redirectAttributes) {
		boardService.increaseBoardLikes(boardNo);
		redirectAttributes.addAttribute("no", boardNo);
		return "redirect:detail.do";
	}
	@RequestMapping("/detail.do")
	public String detailBoard(@RequestParam("no") long boardNo, Model model) {
		model.addAttribute("board", boardService.getBoardDetail(boardNo));
		return "board/detail";
	}
	public String modifyBorad(@RequestParam("no") long boardNo, RedirectAttributes redirectAttributes) {
		Board board = boardService.getBoardDetail(boardNo);
		boardService.modifyBoardDetail(board);
		redirectAttributes.addAttribute("no", boardNo);
		
		return "board/datail";
	}
	
}
