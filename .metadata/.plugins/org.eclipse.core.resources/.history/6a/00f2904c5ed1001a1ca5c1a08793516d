<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- 
		database.properties 파일 읽기
	 -->
	<context:property-placeholder location="classpath:/spring/config/database.properties"/>
	<!-- 
		DataSource 빈 설정
	 -->
	 
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
	 	<property name="driverClassName" 	value="${db.driverClassName}"/>
	 	<property name="url" 				value="${db.url}"/>
	 	<property name="username"			value="${db.username}"/>
	 	<property name="password" 			value="${db.password}"/>
	</bean>
	<!-- 
		트랜잭션 매니저 빈 설정
		TransactionManager는 선언적 트랜잭션 처리를 지원하는 객체다.
		트랜잭션처리가 필요한 클래스에 @Transactional 어노테이션을 부착해두면
		해당 
	 -->
	
	
	<!-- 
		mybatis 핵심객체인 SqlSessionFactory를 스프링의 빈으로 등록시키는
		SqlSessionFactoryBean을 <bean></bean>로 정의한다.
			- ConfigLocation : mybatis 환경설정 파일의 경로를 설정한다.
			- mapperLocations : mapper 파일의 경로를 설정한다.
			- typeAliases : 별칭을 부여할 VO객체들이 포함된 패키지를 설정한다.
			- dataSource : 커넥션풀을 제공하는 DataSource 객체의 빈 아이디를 설정한다.
	 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		 <property name="configLocation" value="classpath:/mybatis/mybatis-config.xml" />
		 <property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 
		<mybatis-spring:scan base-package="패키지명" /> 태그는
		지정된 패키지에서 Mapper 매퍼 인터페이스(UserDao, BlogDao, BlogCommentDao)를 검색해서,
		매퍼 인스턴스(userDao의 구현객체, BlogDao 의 구현객체, BlogCommentDao 의구현 객체) 를 생성한다.
		생성된 매퍼 인스턴스는 스프링 컨테이너의 빈으로 자동 등록된다.
		즉, 스프링 컨테이너에  UserDao/BlogDao/BlogCommentDao의 구현 객체가 등록/관리된다.
		* (매퍼 인터페이스 + 매퍼 파일) * (<mybatis-spring / >) => 매퍼인스턴스(구현객체)
	 -->
	<mybatis-spring:scan base-package="kr.co.jhta.dao"/>
	
	<!-- 
		의존성 주입 및 기타 어노테이션을 감지/분석/처리하는 빈 등록
	 -->
	<context:annotation-config />
	<!-- 
		지정된 패키지에서 클래스를 스캔해서 스프링 컨테이너의 빈으로 등록
		@Autowried 나 @Resource 어노테이션이 있으면,
		해당 타입의 객체를 스프링 컨테이너에서 찾아서 의존성 주입 일어난다.
	 -->
	<context:component-scan base-package="kr.co.jhta.service" />
	
</beans>
