<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
<!-- 의존성 주입 및 기타 어노테이션을 감지/분석/처리 -->
<!-- 
	@Autowired, @Resource, @Value, @PostConstructor, @PreDestroy 등의
	어노테이션을 감지해서 스프링 컨테이너가 관리하는 빈(객체)들간의 의존성 주입등의 작업을 수행하는
	xxxAnnotationProcessor
 -->
<context:annotation-config />
<!-- 지정된 패키지에서 클래스 스캔, 스프링 컨테이너의 빈으로 등록 @Autowired, @Resource 어노테이션이 있으면
	해당 타입의 객체를 스프링 컨테이너에서 찾아서 의존성 주입
 -->
 <context:component-scan base-package="kr.co.jhta.view" />
<context:component-scan base-package="kr.co.jhta.web" />
<!-- MVC 설정-->
<mvc:annotation-driven >
	<mvc:argument-resolvers>
		<bean class="kr.co.jhta.resolver.UserArgumentResolver" />
	</mvc:argument-resolvers>
</mvc:annotation-driven>
<!-- 
	* <mvc:view-resolver>태그에는 다양한 ViewResolver관련 설정을 포함할 수 있다.
	* <mvc:jsp prefix="" suffix=""> 는 뷰템플릿(모델의 데이터가 표현되는 곳)이 JSP 일 때 사용되는 태그다.
	  <mvc:jsp > 는 InternalResourceViewResolver를 스프링의 빈으로 등록하고,
	  jps 페이지를 검색 할 때 prefix와 suffix에 설정된 값을 사용한다.

 -->
<mvc:view-resolvers>
	<mvc:jsp prefix="/WEB-INF/views/" suffix=".jsp" />
</mvc:view-resolvers>

<!-- 
	<mvc:resources /> 태그는 정적리소스(그림, 동영상, css , js) 에 대한 요청이 접수되면
	DispatcherSevlet 대상 스프링의 정적리소스를 서비스하는 서블릿 요청을 해결한다.
 -->
<mvc:resources location="/resources/" mapping="/resources/**" />

<!-- 인터셉터를 스프링의 빈으로 등록 -->
<bean id="authenticationIntercepter" class="kr.co.jhta.intercepter.AuthenticationIntercepter"/>
<bean id="authorizationIntercepter" class="kr.co.jhta.intercepter.AuthorizationIntercepter"/>

<mvc:interceptors>
	<mvc:interceptor>
		<mvc:mapping path="/**"/>
		<ref bean="authenticationIntercepter"/>
	</mvc:interceptor>
	<mvc:interceptor>
		<mvc:mapping path="/**"/>
		<ref bean="authorizationIntercepter"/>
	</mvc:interceptor>
</mvc:interceptors>

	<!-- 
	 * mulitpart요청(폼에서 첨부파일 업로드가 존재하는 요청)을 처리하는
	  CommonsMultipartResolver를 스프링의 빈으로 등록한다.
	 * CommonsMultipartResolver는 Apache commons-fileupload.jar와 commons-io.jar를
	 이용해서 multipart요청을 처리한다.
	
	 -->
<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
</bean>

<context:property-placeholder location="/WEB-INF/spring/mvc.properties"/>
</beans>
